# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinChat = channel.unary_unary(
                '/ChatService/JoinChat',
                request_serializer=chat__pb2.JoinRequest.SerializeToString,
                response_deserializer=chat__pb2.JoinResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/ChatService/SendMessage',
                request_serializer=chat__pb2.ChatMessage.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ChatStream = channel.unary_stream(
                '/ChatService/ChatStream',
                request_serializer=chat__pb2.StreamRequest.SerializeToString,
                response_deserializer=chat__pb2.ChatMessage.FromString,
                )
        self.Authenticate = channel.unary_unary(
                '/ChatService/Authenticate',
                request_serializer=chat__pb2.AuthRequest.SerializeToString,
                response_deserializer=chat__pb2.AuthResponse.FromString,
                )
        self.GetHistory = channel.unary_unary(
                '/ChatService/GetHistory',
                request_serializer=chat__pb2.HistoryRequest.SerializeToString,
                response_deserializer=chat__pb2.HistoryResponse.FromString,
                )
        self.CheckUsers = channel.unary_unary(
                '/ChatService/CheckUsers',
                request_serializer=chat__pb2.CheckUsersRequest.SerializeToString,
                response_deserializer=chat__pb2.CheckUsersResponse.FromString,
                )
        self.ListActiveUsers = channel.unary_unary(
                '/ChatService/ListActiveUsers',
                request_serializer=chat__pb2.ListActiveUsersRequest.SerializeToString,
                response_deserializer=chat__pb2.ListActiveUsersResponse.FromString,
                )
        self.SendHistory = channel.unary_unary(
                '/ChatService/SendHistory',
                request_serializer=chat__pb2.SendHistoryRequest.SerializeToString,
                response_deserializer=chat__pb2.AckResponse.FromString,
                )


class ChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def JoinChat(self, request, context):
        """Sends a join request to the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Sends a message to the chat.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatStream(self, request, context):
        """Stream for receiving chat messages.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authenticate(self, request, context):
        """User registration and login.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListActiveUsers(self, request, context):
        """list the active usrs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinChat': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinChat,
                    request_deserializer=chat__pb2.JoinRequest.FromString,
                    response_serializer=chat__pb2.JoinResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__pb2.ChatMessage.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ChatStream': grpc.unary_stream_rpc_method_handler(
                    servicer.ChatStream,
                    request_deserializer=chat__pb2.StreamRequest.FromString,
                    response_serializer=chat__pb2.ChatMessage.SerializeToString,
            ),
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=chat__pb2.AuthRequest.FromString,
                    response_serializer=chat__pb2.AuthResponse.SerializeToString,
            ),
            'GetHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistory,
                    request_deserializer=chat__pb2.HistoryRequest.FromString,
                    response_serializer=chat__pb2.HistoryResponse.SerializeToString,
            ),
            'CheckUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckUsers,
                    request_deserializer=chat__pb2.CheckUsersRequest.FromString,
                    response_serializer=chat__pb2.CheckUsersResponse.SerializeToString,
            ),
            'ListActiveUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListActiveUsers,
                    request_deserializer=chat__pb2.ListActiveUsersRequest.FromString,
                    response_serializer=chat__pb2.ListActiveUsersResponse.SerializeToString,
            ),
            'SendHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHistory,
                    request_deserializer=chat__pb2.SendHistoryRequest.FromString,
                    response_serializer=chat__pb2.AckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def JoinChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatService/JoinChat',
            chat__pb2.JoinRequest.SerializeToString,
            chat__pb2.JoinResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatService/SendMessage',
            chat__pb2.ChatMessage.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ChatService/ChatStream',
            chat__pb2.StreamRequest.SerializeToString,
            chat__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatService/Authenticate',
            chat__pb2.AuthRequest.SerializeToString,
            chat__pb2.AuthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatService/GetHistory',
            chat__pb2.HistoryRequest.SerializeToString,
            chat__pb2.HistoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatService/CheckUsers',
            chat__pb2.CheckUsersRequest.SerializeToString,
            chat__pb2.CheckUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListActiveUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatService/ListActiveUsers',
            chat__pb2.ListActiveUsersRequest.SerializeToString,
            chat__pb2.ListActiveUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ChatService/SendHistory',
            chat__pb2.SendHistoryRequest.SerializeToString,
            chat__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BackupServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BackupHistory = channel.unary_unary(
                '/BackupService/BackupHistory',
                request_serializer=chat__pb2.SendHistoryRequest.SerializeToString,
                response_deserializer=chat__pb2.AckResponse.FromString,
                )


class BackupServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BackupHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BackupHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.BackupHistory,
                    request_deserializer=chat__pb2.SendHistoryRequest.FromString,
                    response_serializer=chat__pb2.AckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BackupService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BackupService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BackupHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BackupService/BackupHistory',
            chat__pb2.SendHistoryRequest.SerializeToString,
            chat__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
